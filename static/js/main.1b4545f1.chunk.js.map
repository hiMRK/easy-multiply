{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","GAME_STATE","isCorrect","hasGiveup","answerAttemps","correctAnswer","userAnswer","_useState","useState","_useState2","Object","slicedToArray","gameState","setGameState","_useState3","_useState4","firstInput","setFirstInput","_useState5","_useState6","secondInput","setSecondInput","_useState7","_useState8","toAddition","setToAddition","react_default","a","createElement","Fragment","className","type","placeholder","onChange","e","target","value","onClick","objectSpread","parseFloat","times","constant","role","aria-label","map","num","id","key","findLastIndex","Boolean","window","location","hostname","match","ROUTING","BrowserRouter","basename","process","Switch","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b4545f1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { findLastIndex, times, constant, map } from 'underscore';\nimport './app.scss';\n\nconst App = () => {\n\n  const GAME_STATE = { isCorrect: false, hasGiveup: false, answerAttemps: 0, correctAnswer: 0, userAnswer: '' };\n  const [gameState, setGameState] = useState(GAME_STATE);\n  const [firstInput, setFirstInput] = useState('');\n  const [secondInput, setSecondInput] = useState('');\n  const [toAddition, setToAddition] = useState('');\n\n  // setup the first/second input numbers\n  const updateFirstInput = (e) => setFirstInput(e.target.value);\n  const updateSecondInput = (e) => setSecondInput(e.target.value);\n\n  // set correct answer\n  const setCorrectAnswer = () => setGameState({\n    ...gameState,\n    correctAnswer: firstInput * secondInput\n  });\n\n  // setup addition show\n  const setAddition = () => {\n    (parseFloat(firstInput) > parseFloat(secondInput)) \n      ? setToAddition(times(secondInput, constant(firstInput))) \n      : setToAddition(times(firstInput, constant(secondInput)));\n    if(gameState.isCorrect) setGameState({\n      ...GAME_STATE,\n      correctAnswer: firstInput * secondInput\n    });\n  };\n\n  // combine functions\n  const initHelper = () => {\n    setCorrectAnswer();\n    setAddition();\n  };\n\n  // set third input numbers\n  const updateThirdInput = (e) => {\n    setGameState({\n      ...gameState,\n      userAnswer: e.target.value\n    });\n  }\n\n  // set user answer\n  const setUserAnswer = () => {\n    setGameState({\n      ...gameState,\n      hasGiveup: false,\n      isCorrect: (gameState.correctAnswer === parseFloat(gameState.userAnswer)) ? true : false,\n      answerAttemps: (!gameState.isCorrect) ? gameState.answerAttemps + 1 : gameState.answerAttemps = 0\n    });\n  };\n\n  // set give up status\n  const displayAnswerGiveup = () => {\n    setGameState({\n      ...gameState,\n      answerAttemps: 0,\n      hasGiveup: true\n    });\n  };\n\n  const resetGameState = () => {\n    setGameState({\n      ...GAME_STATE\n    });\n    setFirstInput('');\n    setSecondInput('');\n    setToAddition('');\n  };\n\n  return (\n    <>\n      <div className='hero'>\n        <div className='container'>\n          <h1 className='title title--h1'>Learn Multiplication the Easy Way</h1>\n          <p className='para para--title'>A multiplication questions goes in, addition comes out</p>\n          <button className='btn btn--default'>Find out how!</button>\n        </div>\n      </div>\n      <div className='app'>\n        <div className='container'>\n          <div className='flex space--mb'>\n            <input type='number' placeholder='First Number' className='input' onChange={updateFirstInput} value={firstInput} />\n            <input type='number' placeholder='Second Number' className='input' onChange={updateSecondInput} value={secondInput} />\n            <button onClick={initHelper} className='btn btn--default'>Make Easy <span role='img' aria-label='Emoji-ThumpsUp'>👍</span></button>\n          </div>\n          { \n            toAddition &&\n              <>\n                <div className='app__addition space--mb'>\n                  <p className='para para--title'>Solve this question with addition:</p>\n                  <div className='flex'>\n                    {\n                      map(toAddition, ((num, id) =>\n                        <span key={id} className='addition__text para'>{ (findLastIndex(toAddition) === id) ? num : num + ' +' }</span>\n                      ))\n                    }\n                  </div>\n                </div>\n                <div className='app__answer space--mb'>\n                    <div className='flex'>\n                      <input type='number' placeholder='Your Answer' className='input' onChange={updateThirdInput} value={gameState.userAnswer} />\n                      <button onClick={setUserAnswer} className='btn btn--success'>Check Answer <span role='img' aria-label='Emoji-HidingMonkey'>🙈</span></button>\n                    </div>\n                </div>\n              </>\n          }\n          <div className='app__result'>\n            <div className='result__wrong'>\n              <div className='flex'>\n                { (!gameState.isCorrect && gameState.answerAttemps >= 1) && <h2 className='title title--h2 title--wrong'>Incorrect</h2>}\n                { (!gameState.isCorrect && gameState.answerAttemps >= 3) && <button onClick={displayAnswerGiveup} className='btn btn--wrong'>Give Up <span role='img' aria-label='Emoji-Sad' className='emoji'>😞</span></button> }\n              </div>\n            </div>\n            <div className='result__correct'>\n              { (gameState.isCorrect || gameState.hasGiveup) &&\n                <>\n                  <div className='corect__answer'>\n                    { (gameState.isCorrect)  && <h2 className='title title--h2 title--success'><span role='img' aria-label='Emoji-PartyPopper' className='emoji emoji--flip'>🎉🎉</span> Yes! The answer is {gameState.correctAnswer}! <span role='img' aria-label='Emoji-PartyPopper'>🎉🎉</span></h2> }\n                    { (!gameState.isCorrect)  && <h2 className='title title--h2'><p className='title--wrong'>The answer is {gameState.correctAnswer}!</p> Better luck solving it next time <span role='img' aria-label='Emoji-ThumbsUp' className='emoji'>👍</span></h2> }\n                  </div>\n                  <button onClick={resetGameState} className='btn btn--warning'>Reset <span role='img' aria-label='Emoji-FingerPointLeft'>👈</span></button> \n                </>\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nconst ROUTING = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n      </Switch>\n    </>\n  </BrowserRouter> \n);\n\nReactDOM.render(ROUTING, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}