{"version":3,"sources":["App.js","Test.js","Nav.js","serviceWorker.js","index.js"],"names":["App","GAME_STATE","isCorrect","hasGiveup","answerAttemps","correctAnswer","userAnswer","_useState","useState","_useState2","Object","slicedToArray","gameState","setGameState","_useState3","_useState4","firstInput","setFirstInput","_useState5","_useState6","secondInput","setSecondInput","_useState7","_useState8","toAddition","setToAddition","react_default","a","createElement","react","type","onChange","e","target","value","onClick","objectSpread","parseFloat","times","constant","map","num","id","key","mr","findLastIndex","Test","Nav","Link","to","Boolean","window","location","hostname","match","ROUTING","BrowserRouter","basename","process","src_Nav","Switch","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.099a1dbc.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { findLastIndex, times, constant, map } from 'underscore';\n// import { Route } from 'react-router-dom';\n// import { Button, Navbar, Nav, Jumbotron, InputGroup, Form, Container } from 'bootstrap-4-react';\n\nconst App = () => {\n\n  const GAME_STATE = { isCorrect: false, hasGiveup: false, answerAttemps: 0, correctAnswer: 0, userAnswer: '' };\n  const [gameState, setGameState] = useState(GAME_STATE);\n  const [firstInput, setFirstInput] = useState('');\n  const [secondInput, setSecondInput] = useState('');\n  const [toAddition, setToAddition] = useState('');\n\n  // setup the first/second input numbers\n  const updateFirstInput = (e) => setFirstInput(e.target.value);\n  const updateSecondInput = (e) => setSecondInput(e.target.value);\n\n  // set correct answer\n  const setCorrectAnswer = () => setGameState({\n    ...gameState,\n    correctAnswer: firstInput * secondInput\n  });\n\n  // setup addition show\n  const setAddition = () => \n    (parseFloat(firstInput) > parseFloat(secondInput)) \n      ? setToAddition(times(secondInput, constant(firstInput))) \n      : setToAddition(times(firstInput, constant(secondInput)));\n\n  // combine functions\n  const initHelper = () => {\n    setCorrectAnswer();\n    setAddition();\n  };\n\n  // set third input numbers\n  const updateThirdInput = (e) => {\n    setGameState({\n      ...gameState,\n      userAnswer: e.target.value\n    });\n  }\n\n  // set user answer\n  const setUserAnswer = () => {\n    setGameState({\n      ...gameState,\n      hasGiveup: false,\n      isCorrect: (gameState.correctAnswer === parseFloat(gameState.userAnswer)) ? true : false,\n      answerAttemps: (!gameState.isCorrect) ? gameState.answerAttemps + 1 : gameState.answerAttemps = 0\n    });\n  };\n\n  // set give up status\n  const displayAnswerGiveup = () => {\n    setGameState({\n      ...gameState,\n      hasGiveup: true\n    });\n  };\n\n  const resetGameState = () => {\n    setGameState({\n      ...GAME_STATE\n    });\n    setFirstInput('');\n    setSecondInput('');\n    setToAddition('');\n  };\n\n  return (\n    <Fragment>\n      <div>\n        <input type='number' onChange={updateFirstInput} value={firstInput} />\n        <input type='number' onChange={updateSecondInput} value={secondInput} />\n        <button onClick={initHelper}>Make Easy 👍</button>\n      </div>\n      <p>\n        {\n          (toAddition)\n            ? map(toAddition, ((num, id) =>\n              <span key={id} mr='3'>\n                {\n                  (findLastIndex(toAddition) === id)\n                    ? num\n                    : num + '+'\n                }\n              </span>\n            ))\n            : ''\n        }\n      </p>\n      <div>\n        <input type='number' onChange={updateThirdInput} value={gameState.userAnswer} />\n        <button onClick={setUserAnswer}>Check Answer 🙈</button>\n      </div>\n      <div>\n        {\n          (!gameState.isCorrect && gameState.answerAttemps >= 2) \n            ? <button onClick={displayAnswerGiveup}>Give Up 😞</button>\n            : ''\n        }\n        {\n          (gameState.isCorrect || gameState.hasGiveup)\n            ? \n              (gameState.isCorrect === true)\n                ? <p>Yes! The answer is {gameState.userAnswer}! 🥳</p>\n                : <p>The answer is {gameState.correctAnswer}! Better luck solving it next time! 🦂</p>\n            : ''\n        }\n      </div>\n      <button onClick={resetGameState}>Reset 👈</button>\n    </Fragment>\n  );\n};\n\nexport default App;","import React, { Fragment } from 'react';\n\nconst Test = () => {\n  return (\n    <Fragment>\n      <h1>How to use this thing</h1>\n      <ol>\n        <li>Add your numbers</li>\n        <li>Turn it into addition</li>\n        <li>Enter your answer</li>\n      </ol>\n    </Fragment>\n  );\n};\n\nexport default Test;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './nav.scss';\n\nconst Nav = () => {\n  return (\n    <ul>\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/test\">Users</Link>\n      </li>\n    </ul>\n  );\n};\n\nexport default Nav;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport Test from './Test';\nimport Nav from './Nav';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Link, Switch } from 'react-router-dom';\n\nconst ROUTING = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <div>\n      {/* <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/test\">Users</Link>\n        </li>\n      </ul> */}\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/test\" component={Test} />\n      </Switch>\n    </div>\n  </BrowserRouter> \n);\n\nReactDOM.render(ROUTING, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}